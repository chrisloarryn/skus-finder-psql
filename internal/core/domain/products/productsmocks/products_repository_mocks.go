// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/skus-finder-psql/internal/core/domain/products (interfaces: Repository)

// Package productsmocks is a generated GoMock package.
package productsmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	products "github.com/skus-finder-psql/internal/core/domain/products"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteProductBySKU mocks base method.
func (m *MockRepository) DeleteProductBySKU(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductBySKU", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductBySKU indicates an expected call of DeleteProductBySKU.
func (mr *MockRepositoryMockRecorder) DeleteProductBySKU(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductBySKU", reflect.TypeOf((*MockRepository)(nil).DeleteProductBySKU), arg0, arg1)
}

// FindAllProducts mocks base method.
func (m *MockRepository) FindAllProducts(arg0 context.Context) ([]products.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProducts", arg0)
	ret0, _ := ret[0].([]products.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProducts indicates an expected call of FindAllProducts.
func (mr *MockRepositoryMockRecorder) FindAllProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProducts", reflect.TypeOf((*MockRepository)(nil).FindAllProducts), arg0)
}

// FindProductBySKU mocks base method.
func (m *MockRepository) FindProductBySKU(arg0 context.Context, arg1 string) (products.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductBySKU", arg0, arg1)
	ret0, _ := ret[0].(products.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductBySKU indicates an expected call of FindProductBySKU.
func (mr *MockRepositoryMockRecorder) FindProductBySKU(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductBySKU", reflect.TypeOf((*MockRepository)(nil).FindProductBySKU), arg0, arg1)
}

// SaveProduct mocks base method.
func (m *MockRepository) SaveProduct(arg0 context.Context, arg1 products.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProduct indicates an expected call of SaveProduct.
func (mr *MockRepositoryMockRecorder) SaveProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProduct", reflect.TypeOf((*MockRepository)(nil).SaveProduct), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockRepository) UpdateProduct(arg0 context.Context, arg1 products.Product) (products.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(products.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockRepositoryMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockRepository)(nil).UpdateProduct), arg0, arg1)
}
